@page "/"
@inject IJSRuntime JSRuntime

<h1>Hello, world!</h1>

Welcome to your new app.

<SurveyPrompt Title="How is Blazor working for you?" />

@code {
    private enum MyEnum { Value1 = 7, Value2 = 5, Value3 = 6 }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        var module = await JSRuntime.InvokeAsync<IJSObjectReference>(
            "import", "./js/interop_sample.js"
        );

        await module.InvokeVoidAsync("outputLog", null);
        await module.InvokeVoidAsync("outputLog", true);
        await module.InvokeVoidAsync("outputLog", false);

        await module.InvokeVoidAsync("outputLog", 123);
        await module.InvokeVoidAsync("outputLog", "123");
        await module.InvokeVoidAsync("outputLog", "sample string");

        var sample_list = new List<string>() { "aaa", "bbb", "ccc" };
        await module.InvokeVoidAsync("outputLog", sample_list);
        await module.InvokeVoidAsync("outputLog", sample_list as IEnumerable<string>);

        await module.InvokeVoidAsync("outputLog", new Dictionary<int, string>() {
            { 1, "value1" },
            { 2, "value2" },
            { 3, "value3" },
        });

        (int, string) sample_tuple = (909, "sample");
        await module.InvokeVoidAsync("outputLog", sample_tuple);
        await module.InvokeVoidAsync("outputLog", sample_tuple.ToString());

        await module.InvokeVoidAsync("outputLog", MyEnum.Value1);
        await module.InvokeVoidAsync("outputLog", MyEnum.Value2);
        await module.InvokeVoidAsync("outputLog", MyEnum.Value3);
    }

}
